package 정리.스태틱.싱글톤;

public class ViewMain {
    /*
        싱글톤
        : 객체의 인스턴스가 오직 1개만 생성되는 패턴

        사용 이유
        : 고정된 메모리 영역을 사용하기 땨문에 추후 해당 객체에 접근할 때 메모리 낭비를 방지
        : 이미 생성된 인스턴스를 활용하니 속도 측면에서도 이점이 있다.
        : 다른 클래스 간의 데이터 공유가 쉽다.(데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있다.)

        문제점
        : 동시성을 해결하기 위해 synchronized 키워드를 사용해야 한다.
        : 테스트하기 어렵다. 싱글톤 인스턴스는 자원을 공유하기 때문에 테스트가 격리된 환경에서 수행되려면 매번 초기화시켜주어야 한다.
        : 의존 관계상 클라리언트가 구체 클래스에 의존하게 된다.
        : 자식 클래스를 만들 수 없다는 점과, 내부 상태를 변경하기 어려움 -> 유연성이 많이 떨어짐

     */
    public static void main(String[] args) {
        ProductView.getInstance().showMainView();
        ProductView.getInstance().showOrderView();
    }
}
