package 정리;

/*
    접근지정자
    public(자주 사용)
    : 공개 정도가 가장 높고 어디에서든 자유롭게 접근할 수 있다.
    : 접근 제한 없음
    : 동일 클래스, 동일 패키지. 다른 패키지의 자식 클래스, 다른 패키지

    protected(잘 사용하지 않는다.)
    : 같은 패키지 내에서 접근이 간으하고 다른 패키지에서도 상속을 받은 클래스 내부에서는 사용 가능하다.
    : public과 다른 점은 다른 패키지의 자 식 클래스 외부에서는 접근할 수 없다는 것이다.
    : 동일 패키지와 상속 받은 클래스 내부
    : 동일 클래스, 동일 패키지, 다른 패키지의 자식 클래스

    default
    : 같은 패키지내에서만 접근이 가능하다.
    : 아무런 접근 지정자도 없을 경우 이 옵션이 자동으로 적용된다.
    : 동일 패키지 내에서만
    : 동일 클래스, 동일 패키지

    private(자주 사용)
    : 동일 클래스내에서만 접근이 가능한 가장 낮은 단계의 자유도를 갖는다.
    : 동일 클래스 내에서만
    : 동일 클래스

*/
public class 접근지정자 {

    private int code; // 동일한 클래스내에서만 사용 가능, 외부에서 건들일 수 없다.
    private String name; // 변수들은 무조건 private
//  int codenum; 앞에 아무 것도 없어 보이지만 default가 있는 상태이다.


    public int getCode() { // 앞에 모조건 get 뒤엔 무조건 카멜 표기법
        return code;
    }

    public void setCode(int code) { // 앞에 무조건 set 뒤엔 무조건 카멜 표기법을 사용, 값을 넣을려면 매개변수 필요
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) { // 메소드들은 대부분 public 사용
        this.name = name;
    }

    /*
    객체 지향 프로그래밍에서 객체의 데이터는 객체 외부에서 직접적으로 접근하는 것을 막는다.
    객체 데이터를 외부에서 읽고 변경 시 객체의 무결성이 깨질 수 있기 때문
    객체 지향 프로그래밍에서는 메소드를 통해 데이터를 변경하는 방법 선호
    private로 보호 받고 있는 필드값들을 사용하기 위해서

    setter
    : 외부에서 메소드를 통해 데이터에 접근하도록 유도한다.

    getter
    : 외부에서 객체의 데이터를 읽을 때도 메소드를 사용


    */
}
